// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutomaticCode
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class MainCode : MainCodeBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using CHControl.ChwareStudio.MetaModel;\r\nusing System;\r\nusing System.Collections." +
                    "ObjectModel;\r\nusing System.ComponentModel;\r\nusing System.Windows;\r\nusing System." +
                    "Windows.Controls;\r\nusing System.Windows.Media.Imaging;\r\n\r\nnamespace CHControl.");
            
            #line 15 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Manage\r\n{\r\n    /// <summary>\r\n    /// ");
            
            #line 18 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageWindow.xaml 的交互逻辑\r\n    /// </summary>\r\n    public partial class ");
            
            #line 20 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"ManageWindow : ClosableUserControl, IUserRightModule, INotifyPropertyChanged
    {
	    #region INotifyPropertyChanged 属性变化时通知
        public event PropertyChangedEventHandler PropertyChanged;

        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        protected void NotifyPropertyChanged<T>(System.Linq.Expressions.Expression<Func<T>> propertyExpression)
        {
            try
            {
                System.Linq.Expressions.MemberExpression memberExpression = propertyExpression.Body as System.Linq.Expressions.MemberExpression;
                this.NotifyPropertyChanged(memberExpression.Member.Name);
            }
            catch
            {
                throw new System.ArgumentNullException(""propertyExpression"");
            }
        }
        #endregion

        private ObservableCollection<");
            
            #line 46 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("> m_");
            
            #line 46 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List;\r\n        /// <summary>\r\n        /// 列表\r\n        /// </summary>\r\n        pub" +
                    "lic ObservableCollection<");
            
            #line 50 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 50 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List\r\n        {\r\n            get { return m_");
            
            #line 52 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List; }\r\n            set\r\n            {\r\n                m_");
            
            #line 55 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List = value;\r\n                NotifyPropertyChanged(\"");
            
            #line 56 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List\");\r\n            }\r\n        }\r\n        private ");
            
            #line 59 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 59 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model;\r\n        /// <summary>\r\n        /// 实体\r\n        /// </summary>\r\n        pu" +
                    "blic ");
            
            #line 63 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 63 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model\r\n        {\r\n            get { return m_");
            
            #line 65 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model; }\r\n            set\r\n            {\r\n                m_");
            
            #line 68 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model = value;\r\n                NotifyPropertyChanged(\"");
            
            #line 69 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model\");\r\n            }\r\n        }\r\n\r\n\t\tpublic ");
            
            #line 73 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageWindow()\r\n        {\r\n            InitializeComponent();\r\n            this.S" +
                    "etValue(Window.TitleProperty, \"");
            
            #line 76 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("管理\");\r\n            var bi = new BitmapImage(new Uri(@\"/Md_");
            
            #line 77 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageModule;component/Resources/icon.png\", UriKind.RelativeOrAbsolute));\r\n      " +
                    "      this.SetValue(Window.IconProperty, bi);\r\n\t\t\t");
            
            #line 79 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model = new ");
            
            #line 79 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t\t");
            
            #line 80 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List=");
            
            #line 80 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.SelectEntitys(\"select * from [dbo].[");
            
            #line 80 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.DataName));
            
            #line default
            #line hidden
            this.Write(@"]"");
        }

		private void btnQuery_Click(object sender, RoutedEventArgs e)
        {
            string startTime = txtStartDate.Text;
            string endTime = txtEndDate.Text;
            
        }
		private void btnClick_insert(object sender, RoutedEventArgs e)
        {
            ");
            
            #line 91 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model = new ");
            
            #line 91 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t\t");
            
            #line 92 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.EntityStatu = \"insert\";\r\n            \r\n        }\r\n\t\tprivate void btnClick_d" +
                    "elete(object sender, RoutedEventArgs e)\r\n        {\r\n            if (");
            
            #line 97 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model != null)\r\n            {\r\n                bool result = ");
            
            #line 99 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.DeleteEntity();\r\n                if (result)\r\n                {\r\n          " +
                    "          ");
            
            #line 102 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List.Remove(");
            
            #line 102 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"Model);
                    MessageBox.Show(""删除成功！"");
                }
                else
                {
                    MessageBox.Show(""删除失败！"");
                }
            }
            
        }
		private void btnClick_save(object sender, RoutedEventArgs e)
        {
            if (");
            
            #line 114 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model != null)\r\n            {\r\n                bool result = false;\r\n            " +
                    "    if (");
            
            #line 117 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.EntityStatu == \"insert\")\r\n                {\r\n                    result = ");
            
            #line 119 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.InsertEntity();\r\n                    ");
            
            #line 120 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List.Add(");
            
            #line 120 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model);\r\n                }\r\n                else\r\n                {\r\n            " +
                    "        result = ");
            
            #line 124 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"Model.UpdateEntity();
                }
                if (result)
                {
                    MessageBox.Show(""保存成功!"");
                }
                else
                {
                    MessageBox.Show(""保存失败!"");
                }
            }
        }
		private void DataGrid_SelectionChanged_1(object sender, SelectionChangedEventArgs e)
        {
		    if(");
            
            #line 138 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model!=null)\r\n\t\t\t{\r\n\t\t\t   ");
            
            #line 140 "E:\代码生成器\AutomaticCode\AutomaticCode\MainCode.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model.EntityStatu = \"update\";\r\n\t\t\t}\r\n        }\r\n\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MainCodeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
