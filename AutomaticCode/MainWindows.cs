// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutomaticCode
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class MainWindows : MainWindowsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<meta:ClosableUserControl  x:Class=\"CHControl.");
            
            #line 8 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Manage.");
            
            #line 8 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"ManageWindow""
        xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        xmlns:d=""http://schemas.microsoft.com/expression/blend/2008""
        xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006""
        xmlns:local=""clr-namespace:CHControl.");
            
            #line 13 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Manage\"\r\n         xmlns:meta=\"clr-namespace:CHControl.ChwareStudio.MetaModel;asse" +
                    "mbly=ChwareStudio.MetaModel\"\r\n        mc:Ignorable=\"d\"\r\n        DataContext=\"{Bi" +
                    "nding RelativeSource={RelativeSource Self}}\"\r\n        >\r\n\t <meta:ClosableUserCon" +
                    "trol.Resources>\r\n\r\n\t </meta:ClosableUserControl.Resources>\r\n\t <DockPanel Backgro" +
                    "und=\"#FFF1F6F9\" >\r\n\t      <Border Margin=\"5\" Height=\"auto\" VerticalAlignment=\"St" +
                    "retch\" CornerRadius=\"0\" BorderThickness=\"1\"    Background=\"#FFF1F6F9\"\r\n         " +
                    "               BorderBrush=\"#FFF1F6F9\"\r\n                        Padding=\"5,5,5,1" +
                    "0\">\r\n               <Border.Effect>\r\n                <DropShadowEffect ShadowDep" +
                    "th=\"2\"  Opacity=\"0.595\" Direction=\"290\" />\r\n               </Border.Effect>\r\n   " +
                    "            <Grid>\r\n\t\t\t\t\t<Grid.RowDefinitions>\r\n\t\t\t\t\t\t<RowDefinition Height=\"35\"" +
                    "></RowDefinition>\r\n\t\t\t\t\t\t<RowDefinition ></RowDefinition>\r\n\t\t\t\t\t\t<RowDefinition " +
                    "Height=\"35\"></RowDefinition>\r\n\t\t\t\t\t</Grid.RowDefinitions>\r\n                \r\n\t\t\t" +
                    "\t <StackPanel Grid.Row=\"0\" Orientation=\"Horizontal\" Margin=\"5\">\r\n\t\t\t\t     <TextB" +
                    "lock VerticalAlignment=\"Center\"  Margin=\"0,0,5,3\"><Run Text=\"查询时间：\"/></TextBlock" +
                    ">\r\n                    <TextBox Width=\"100\" x:Name=\"txtStartDate\" Text=\"{Binding" +
                    " ElementName=dpStartTime, Path=SelectedDate, StringFormat=\\{0:yyyy-MM-dd\\}}\" Hor" +
                    "izontalAlignment=\"Center\" VerticalAlignment=\"Center\" IsEnabled=\"False\"/>\r\n      " +
                    "              <DatePicker  Margin=\"0\" x:Name=\"dpStartTime\"  SelectedDateFormat=\"" +
                    "Short\"  Width=\"30\" BorderBrush=\"{x:Null}\" />\r\n                    <TextBlock Ver" +
                    "ticalAlignment=\"Center\" Margin=\"5,0,5,3\"><Run Text=\"至\"/></TextBlock>\r\n          " +
                    "          <TextBox Width=\"100\" x:Name=\"txtEndDate\" Text=\"{Binding SelectedDate, " +
                    "ElementName=dpEndTime, StringFormat=\\{0:yyyy-MM-dd\\}}\" HorizontalAlignment=\"Cent" +
                    "er\" VerticalAlignment=\"Center\"  IsEnabled=\"False\"/>\r\n                    <DatePi" +
                    "cker  Margin=\"0\" x:Name=\"dpEndTime\"  SelectedDateFormat=\"Short\"  Width=\"30\" Bord" +
                    "erBrush=\"{x:Null}\" />\r\n                    <Button Margin=\"5,0,30,0\"  Width=\"aut" +
                    "o\" x:Name=\"btnQuery\"  Tag=\"查询\" Click=\"btnQuery_Click\">\r\n                        " +
                    "<StackPanel Orientation=\"Horizontal\" Margin=\"5,0\">\r\n                            " +
                    "<TextBlock  Text=\"查询\" Margin=\"3,0,0,0\" />\r\n                        </StackPanel>" +
                    "\r\n                    </Button>\r\n\t\t\t\t </StackPanel>\r\n\t\t\t\t <Grid Grid.Row=\"1\">\r\n " +
                    "                   <Grid.ColumnDefinitions>\r\n                        <ColumnDefi" +
                    "nition Width=\"70*\"></ColumnDefinition>\r\n                        <ColumnDefinitio" +
                    "n  Width=\"30*\"></ColumnDefinition>\r\n                    </Grid.ColumnDefinitions" +
                    ">\r\n                    <GroupBox  Grid.Row=\"0\"  Height=\"auto\"  Margin=\"5\" Border" +
                    "Brush=\"#FF2599A4\" BorderThickness=\"1\">\r\n                        <GroupBox.Header" +
                    ">\r\n                            <Border    BorderThickness=\"1,1,1,1\" Margin=\"0,0," +
                    "0,0\" BorderBrush=\"#FFBFCAD0\"  CornerRadius=\"0\"    Padding=\"5,0,5,0\" Background=\"" +
                    "#FF2599A4\">\r\n                                <StackPanel Orientation=\"Horizontal" +
                    "\">\r\n                                    <Image Margin=\"0,0,3,0\"    Source=\"Resou" +
                    "rces/infoEdit.png\" />\r\n                                    <TextBlock Foreground" +
                    "=\"White\"> ");
            
            #line 58 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"列表</TextBlock>
                                </StackPanel>
                            </Border>
                        </GroupBox.Header>
                        <DataGrid AutoGenerateColumns=""False""  VerticalAlignment=""Top""      CanUserSortColumns=""True""  IsReadOnly=""True""  CanUserResizeColumns=""True"" 
                              CanUserResizeRows=""True""  SelectionMode=""Single""  CanUserReorderColumns=""True"" AlternationCount=""2""  RowHeaderWidth=""0"" CanUserAddRows=""False"" 
                                  Margin=""5,5,5,5""   ItemsSource=""{Binding ");
            
            #line 64 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("List}\"  SelectedItem=\"{Binding ");
            
            #line 64 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Model}\" SelectionChanged=\"DataGrid_SelectionChanged_1\">\r\n                        " +
                    "    <DataGrid.Columns>\r\n\t\t\t\t\t\t\t\t");
            
            #line 66 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

								 foreach(var item in dataM.ColumnList)
			                     {
								      
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t      <DataGridTextColumn Header=\"");
            
            #line 70 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\"   Binding=\"{Binding  ");
            
            #line 70 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("}\"/>\r\n\t\t\t\t\t\t\t\t\t  ");
            
            #line 71 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

								 }
								
            
            #line default
            #line hidden
            this.Write("                            </DataGrid.Columns>\r\n                        </DataGr" +
                    "id>\r\n                    </GroupBox>\r\n                    <GroupBox DataContext=" +
                    "\"{Binding ");
            
            #line 77 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"Model}"" Grid.Row=""0"" Grid.Column=""1"" Height=""auto""  Margin=""5"" BorderBrush=""#FF2599A4"" BorderThickness=""1""  >
                        <GroupBox.Header>
                            <Border    BorderThickness=""1,1,1,1"" Margin=""0,0,0,0"" BorderBrush=""#FFBFCAD0""  CornerRadius=""0""    Padding=""5,0,5,0"" Background=""#FF2599A4"">
                                <StackPanel Orientation=""Horizontal"">
                                    <Image Margin=""0,0,3,0""    Source=""Resources/infoEdit.png"" />
                                    <TextBlock Foreground=""White""> ");
            
            #line 82 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"详细</TextBlock>
                                </StackPanel>
                            </Border>
                        </GroupBox.Header>
                        <Grid  HorizontalAlignment=""Stretch"" >
                            <Grid.RowDefinitions>
							     ");
            
            #line 88 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

								  for(int i=0;i<dataM.ColumnList.Count;i++)
								  {
								     
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t   <RowDefinition Height=\"Auto\" />\r\n\t\t\t\t\t\t\t\t\t ");
            
            #line 93 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

								  }
								 
            
            #line default
            #line hidden
            this.Write(@"								 <RowDefinition Height=""Auto"" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition  Width=""Auto""/>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
							");
            
            #line 102 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

							   int js=0;
							   foreach(var item in dataM.ColumnList)
							   {
							       
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t       <TextBlock Grid.Row=\"");
            
            #line 107 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(js));
            
            #line default
            #line hidden
            this.Write("\" Grid.Column=\"0\" HorizontalAlignment=\"Right\" VerticalAlignment=\"Center\"><Run Tex" +
                    "t=\"");
            
            #line 107 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("：\"/></TextBlock>\r\n                                       <TextBox Grid.Row=\"");
            
            #line 108 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(js));
            
            #line default
            #line hidden
            this.Write("\" Grid.Column=\"1\" Margin=\"5\" Height=\"auto\" Text=\"{Binding ");
            
            #line 108 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("}\"/>\r\n\t\t\t\t\t\t\t\t   ");
            
            #line 109 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"

								   js++;
							   }
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<StackPanel Grid.Row=\"");
            
            #line 113 "E:\代码生成器\AutomaticCode\AutomaticCode\MainWindows.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(js));
            
            #line default
            #line hidden
            this.Write("\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" HorizontalAlignment=\"Center\" Orientation=\"H" +
                    "orizontal\" Margin=\"0,10,0,5\" >\r\n                                    <Button  Tag" +
                    "=\"新增明细\" VerticalAlignment=\"Center\" Margin=\"5,0,5,0\"\tWidth=\"auto\"\tPadding=\"10,0\" " +
                    "Click=\"btnClick_insert\"  >\r\n                                        <StackPanel " +
                    "Orientation=\"Horizontal\">\r\n                                            <TextBloc" +
                    "k Text=\"新增明细\"/>\r\n                                        </StackPanel>\r\n        " +
                    "                            </Button>\r\n                                    <Butt" +
                    "on VerticalAlignment=\"Center\"  Padding=\"10,0\" Margin=\"5,0\"  Tag=\"删除明细\" Click=\"bt" +
                    "nClick_delete\" >\r\n                                        <StackPanel Orientatio" +
                    "n=\"Horizontal\">\r\n                                            <TextBlock Text=\"删除" +
                    "明细\" />\r\n                                        </StackPanel>\r\n                 " +
                    "                   </Button>\r\n                                    <Button  Paddi" +
                    "ng=\"10,0\" VerticalAlignment=\"Center\" Margin=\"5,0,5,0\" Width=\"auto\"  Tag=\"保存设置\"  " +
                    " Click=\"btnClick_save\">\r\n                                        <StackPanel Ori" +
                    "entation=\"Horizontal\">\r\n                                            <TextBlock><" +
                    "Run Text=\"保存设置\"/></TextBlock>\r\n                                        </StackPa" +
                    "nel>\r\n                                    </Button>\r\n                           " +
                    "     </StackPanel>\r\n                        </Grid>\r\n                    </Group" +
                    "Box>\r\n\t\t\t\t\t</Grid>\r\n                </Grid>\r\n\t\t   </Border>\r\n\t </DockPanel>\r\n</m" +
                    "eta:ClosableUserControl>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MainWindowsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
