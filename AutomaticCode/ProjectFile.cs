// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutomaticCode
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class ProjectFile : ProjectFileBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProjectGuid>{");
            
            #line 13 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
 Guid.NewGuid().ToString();
            
            #line default
            #line hidden
            this.Write("}</ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Pro" +
                    "perties</AppDesignerFolder>\r\n    <RootNamespace>CHControl.");
            
            #line 16 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("Manage</RootNamespace>\r\n    <AssemblyName>Md_");
            
            #line 17 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageModule</AssemblyName>\r\n    <TargetFrameworkVersion>v4.0</TargetFrameworkVer" +
                    "sion>\r\n    <FileAlignment>512</FileAlignment>\r\n    <ProjectTypeGuids>{60dc8134-e" +
                    "ba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeG" +
                    "uids>\r\n    <WarningLevel>4</WarningLevel>\r\n    <AutoGenerateBindingRedirects>tru" +
                    "e</AutoGenerateBindingRedirects>\r\n    <SccProjectName>SAK</SccProjectName>\r\n    " +
                    "<SccLocalPath>SAK</SccLocalPath>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccProv" +
                    "ider>SAK</SccProvider>\r\n    <TargetFrameworkProfile />\r\n  </PropertyGroup>\r\n  <P" +
                    "ropertyGroup Condition=\" \'$(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n  " +
                    "  <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugSymbols>true</DebugSymbols>" +
                    "\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPa" +
                    "th>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n" +
                    "    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </P" +
                    "ropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configuration)|$(Platform)\' == \'R" +
                    "elease|AnyCPU\' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugType>p" +
                    "dbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\<" +
                    "/OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>pro" +
                    "mpt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <Pr" +
                    "opertyGroup>\r\n    <StartupObject />\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Ref" +
                    "erence Include=\"ChwareStudio.MetaModel\">\r\n      <HintPath>..\\..\\..\\Lib\\ChwareStu" +
                    "dio.MetaModel.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"ChwareSt" +
                    "udio.Module\">\r\n      <HintPath>..\\..\\..\\Lib\\ChwareStudio.Module.dll</HintPath>\r\n" +
                    "    </Reference>\r\n    <Reference Include=\"Common\">\r\n      <HintPath>..\\..\\..\\Lib" +
                    "\\Common.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"log4net\">\r\n   " +
                    "   <HintPath>..\\..\\..\\Lib\\log4net.dll</HintPath>\r\n    </Reference>\r\n    <Referen" +
                    "ce Include=\"Microsoft.Practices.Prism\">\r\n      <HintPath>..\\..\\..\\Lib\\Microsoft." +
                    "Practices.Prism.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Micros" +
                    "oft.Practices.Unity\">\r\n      <HintPath>..\\..\\..\\Lib\\Microsoft.Practices.Unity.dl" +
                    "l</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System\" />\r\n    <Referen" +
                    "ce Include=\"System.Data\" />\r\n    <Reference Include=\"System.Xml\" />\r\n    <Refere" +
                    "nce Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Core\" />\r\n    " +
                    "<Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.Dat" +
                    "aSetExtensions\" />\r\n    <Reference Include=\"System.Xaml\">\r\n      <RequiredTarget" +
                    "Framework>4.0</RequiredTargetFramework>\r\n    </Reference>\r\n    <Reference Includ" +
                    "e=\"WindowsBase\" />\r\n    <Reference Include=\"PresentationCore\" />\r\n    <Reference" +
                    " Include=\"PresentationFramework\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile" +
                    " Include=\"Model\\");
            
            #line 85 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(".cs\" />\r\n    <Compile Include=\"");
            
            #line 86 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageModule.cs\" />\r\n\t<Compile Include=\"Model\\NotificationObject.cs\" />\r\n    <Com" +
                    "pile Include=\"");
            
            #line 88 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write("ManageWindow.xaml.cs\">\r\n      <DependentUpon>");
            
            #line 89 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"ManageWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include=""Properties\AssemblyInfo.cs"">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include=""Properties\Resources.Designer.cs"">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include=""Properties\Settings.Designer.cs"">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include=""Properties\Resources.resx"">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <None Include=""Properties\Settings.settings"">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <AppDesigner Include=""Properties\"" />
  </ItemGroup>
  <ItemGroup>
    <None Include=""App.config"" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=""");
            
            #line 118 "E:\代码生成器\AutomaticCode\AutomaticCode\ProjectFile.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataM.ClassName));
            
            #line default
            #line hidden
            this.Write(@"ManageWindow.xaml"">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Resource Include=""Resources\add.png"" />
    <Resource Include=""Resources\box.png"" />
    <Resource Include=""Resources\cancel.png"" />
    <Resource Include=""Resources\check.png"" />
    <Resource Include=""Resources\confirm.png"" />
    <Resource Include=""Resources\copy.png"" />
    <Resource Include=""Resources\delete.png"" />
    <Resource Include=""Resources\icon.png"" />
    <Resource Include=""Resources\infoEdit.png"" />
    <Resource Include=""Resources\loading.png"" />
    <Resource Include=""Resources\save.png"" />
    <Resource Include=""Resources\search.png"" />
    <Resource Include=""Resources\Syn.png"" />
  </ItemGroup>
  <ItemGroup>
    <Resource Include=""Resources\print.png"" />
  </ItemGroup>
  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
  <PropertyGroup>
    <PostBuildEvent>xcopy ""$(TargetPath)"" ""$(ProjectDir)..\..\Output\"" /Y /F /C
if Exist ""$(TargetDir)$(TargetName).xml"" xcopy ""$(TargetDir)$(TargetName).xml"" ""$(ProjectDir)..\..\Output\"" /Y /F /C</PostBuildEvent>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name=""BeforeBuild"">
  </Target>
  <Target Name=""AfterBuild"">
  </Target>
  -->
</Project>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ProjectFileBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
